{
  "nodes": [
    {
      "parameters": {
        "sendTo": "ceo@akijresource.com",
        "subject": "=KPI Report for {{ $today.format('yyyy-MM-dd') }}",
        "message": "=<p>Dear Sir,</p>\n<p>This is the report for {{ $today.format('yyyy-MM-dd') }}.</p>\n{{ $json.emailBody }}\n\n<p>Best Regards,</p>\n<p>Md. Al Amin</p>\n<p>CMO & CRO</p>\n<p>AKIJ iBOS</p>",
        "options": {
          "appendAttribution": false,
          "ccList": "anonna@ibos.io, fardin@ibos.io, anika@ibos.io, hridoy@ibos.io, nayamul@ibos.io, nowshad@ibos.io, muhammad@ibos.io, faruk.ahammed@ibos.io, shahed@ibos.io, wasim@ibos.io, sumaya@ibos.io, hasib@ibos.io, nahean@ibos.io, cmo@ibos.io, cto@ibos.io, cdo@ibos.io, ceo@ibos.io, shahin.iqubal@ibos.io, jannatul@ibos.io, sabuj@ibos.io, moinur@ibos.io, shahriar.shuvo@ibos.io, noshin@ibos.io"
        }
      },
      "type": "n8n-nodes-base.gmail",
      "typeVersion": 2.1,
      "position": [
        4360,
        -1200
      ],
      "id": "7e329e3d-939e-4de0-9b95-912fa65e9344",
      "name": "Gmail",
      "webhookId": "70716796-ef96-42ec-a40f-18fc489c5a57",
      "credentials": {
        "gmailOAuth2": {
          "id": "lAPzRZXFHU9cYly5",
          "name": "Gmail account 108-Eaccount"
        }
      }
    },
    {
      "parameters": {
        "rule": {
          "interval": [
            {}
          ]
        }
      },
      "type": "n8n-nodes-base.scheduleTrigger",
      "typeVersion": 1.2,
      "position": [
        2720,
        -1420
      ],
      "id": "8bc7950d-0682-43e6-952e-4ad12677b7fd",
      "name": "Schedule Trigger"
    },
    {
      "parameters": {
        "promptType": "define",
        "text": "GET all the information about Overall KPI report . Use the HTTPS tool to get all the information.",
        "options": {
          "systemMessage": "Use all the HTTPS tools to get all the information. Keep information from HTTP.donot use star symbol in output Structure"
        }
      },
      "type": "@n8n/n8n-nodes-langchain.agent",
      "typeVersion": 2,
      "position": [
        3120,
        -1420
      ],
      "id": "5de00380-db88-4fe9-aff5-7dab1506ed25",
      "name": "AI Agent"
    },
    {
      "parameters": {
        "model": {
          "__rl": true,
          "mode": "list",
          "value": "gpt-4o-mini"
        },
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.lmChatOpenAi",
      "typeVersion": 1.2,
      "position": [
        3060,
        -1180
      ],
      "id": "a19842dc-b8d3-4d22-9be8-9ec29415a5e8",
      "name": "OpenAI Chat Model",
      "credentials": {
        "openAiApi": {
          "id": "SUyJI0IfI9M95Z5b",
          "name": "OpenAi account 89"
        }
      }
    },
    {
      "parameters": {
        "url": "https://mgm.ibos.io/sme/ExternalApi/GetKPIReportOverAll?seedId=f8945fd6-72ec-4a9e-a15f-a14815f1e006&token=di1O%2F0uMyNvIjlOTWLTEt%2FNA3%2FP6JCRpHqZmkliNLznxdQ4o0aCxsSvwP99YzS0xOSKvVlNsQLKT8KUC145GDg%3D%3D&date=2025-08-31",
        "options": {}
      },
      "type": "n8n-nodes-base.httpRequestTool",
      "typeVersion": 4.2,
      "position": [
        3220,
        -1180
      ],
      "id": "82e5c84a-a9cd-44e2-bfc6-da8e609160c9",
      "name": "Overall KPI report"
    },
    {
      "parameters": {
        "jsCode": "// Get raw text from input (passed from previous node)\nconst rawText = $input.first().json.output || '';\n\n// Helper to clean numbers\nfunction formatNumber(value) {\n  if (!value || value === '-') return '-';\n  // Remove $, *, commas, spaces\n  const cleaned = value.replace(/[*$,\\s]/g, '').trim();\n  const num = parseFloat(cleaned);\n  return isNaN(num) ? value : num;\n}\n\n// Step 1: Extract blocks by splitting on blank lines (two or more newlines)\nconst blocks = rawText.split(/\\n\\s*\\n/);\nconst resultList = [];\n\nfor (const block of blocks) {\n  const lines = block.split('\\n').map(line => line.trim());\n\n  // Match KPI title line, format: \"**KPI: Something**\" or just \"**Something**\"\n  const titleLine = lines.find(line => /\\*\\*.*\\*\\*/.test(line));\n  if (!titleLine) continue;\n\n  // Extract metric name from title\n  const metricMatch = titleLine.match(/\\*\\*(?:KPI:\\s*)?(.+?)\\*\\*/i);\n  if (!metricMatch) continue;\n  const metric = metricMatch[1].trim();\n\n  // Initialize the KPI object\n  const kpi = { metric };\n\n  // Find Frequency, Target, Achievement lines\n  for (const line of lines) {\n    const freqMatch = line.match(/Frequency:\\s*(.+)/i);\n    if (freqMatch) {\n      kpi.frequency = freqMatch[1].trim();\n      continue;\n    }\n\n    const targetMatch = line.match(/Target:\\s*(.+)/i);\n    if (targetMatch) {\n      kpi.target = formatNumber(targetMatch[1]);\n      continue;\n    }\n\n    const achievementMatch = line.match(/Achievement:\\s*(.+)/i);\n    if (achievementMatch) {\n      kpi.achievement = formatNumber(achievementMatch[1]);\n      continue;\n    }\n  }\n\n  resultList.push(kpi);\n}\n\n// Return as individual JSON items (for n8n)\nreturn resultList.map(item => ({ json: item }));\n"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        3480,
        -1420
      ],
      "id": "5e3e9947-76bb-402e-ad55-cbcb9eec4a38",
      "name": "Code"
    },
    {
      "parameters": {
        "jsCode": "const items = $input.all().map(i => i.json);\n\n// Assign section if missing (e.g., \"Overall KPI Report\")\nfor (const item of items) {\n  item.section = item.section || 'Overall KPI Report';\n  item.lastMonth = item.lastMonth || '-';\n  item.remaining = item.remaining || '-';\n  item.target = item.target || '-';\n  item.achieved = item.achievement || item.achieved || '-';\n}\n\n// Group by section\nconst grouped = {};\nfor (const item of items) {\n  const section = item.section;\n  if (!grouped[section]) grouped[section] = [];\n  grouped[section].push(item);\n}\n\n// Build HTML\nlet html = `<h2 style=\"text-align:center;\">Overall KPI Report</h2>`;\n\nfor (const section of Object.keys(grouped)) {\n  html += `<h3 style=\"margin-top:20px;\">${section}</h3>`;\n  html += `\n    <table border=\"1\" cellspacing=\"0\" cellpadding=\"6\" style=\"border-collapse:collapse; width:100%; font-family:sans-serif;\">\n      <thead style=\"background:#f2f2f2;\">\n        <tr>\n          <th>Metric</th>\n          <th>Frequency</th>\n          <th>Target</th>\n          <th>Achieved</th>\n       \n        </tr>\n      </thead>\n      <tbody>\n  `;\n\n  for (const row of grouped[section]) {\n    html += `\n      <tr>\n        <td>${row.metric || '-'}</td>\n        <td>${row.frequency || '-'}</td>\n        <td>${row.target || '-'}</td>\n        <td>${row.achieved || '-'}</td>\n      \n      </tr>\n    `;\n  }\n\n  html += `</tbody></table>`;\n}\n\nreturn [{ json: { html } }];\n"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        3640,
        -1420
      ],
      "id": "5cebeced-4acd-4ba7-b013-5d3035c9b14a",
      "name": "FinalKpi"
    },
    {
      "parameters": {
        "promptType": "define",
        "text": "GET all the information about Manager Wise KPI report . Use the HTTPS tool to get all the information. all the info of ",
        "options": {
          "systemMessage": "Use all the HTTPS tools to get all the information. Keep information from HTTP .donot give\\n......that type of thing as output.donot use star sign"
        }
      },
      "type": "@n8n/n8n-nodes-langchain.agent",
      "typeVersion": 2,
      "position": [
        3080,
        -960
      ],
      "id": "00f49ae2-7b7e-43a1-be0b-a095aee27c60",
      "name": "AI Agent4"
    },
    {
      "parameters": {
        "model": {
          "__rl": true,
          "mode": "list",
          "value": "gpt-4o-mini"
        },
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.lmChatOpenAi",
      "typeVersion": 1.2,
      "position": [
        3060,
        -740
      ],
      "id": "f78229c3-cf0a-4eec-90e1-07a95ddc7a72",
      "name": "OpenAI Chat Model4",
      "credentials": {
        "openAiApi": {
          "id": "SUyJI0IfI9M95Z5b",
          "name": "OpenAi account 89"
        }
      }
    },
    {
      "parameters": {
        "url": "https://mgm.ibos.io/sme/ExternalApi/GetManagerWiseKPIReport?seedId=f8945fd6-72ec-4a9e-a15f-a14815f1e006&token=di1O%2F0uMyNvIjlOTWLTEt%2FNA3%2FP6JCRpHqZmkliNLznxdQ4o0aCxsSvwP99YzS0xOSKvVlNsQLKT8KUC145GDg%3D%3D&date=2025-08-31",
        "options": {}
      },
      "type": "n8n-nodes-base.httpRequestTool",
      "typeVersion": 4.2,
      "position": [
        3360,
        -780
      ],
      "id": "05da9dd0-6769-4d28-840c-9acb466cd13a",
      "name": "Manager Wise KPI report"
    },
    {
      "parameters": {
        "jsCode": "// ✅ Node 1: Code Node – Parse Manager KPI Text into Structured JSON\n\nconst rawText = $input.first().json.output;\n\nfunction parseManagerKPI(text) {\n  const lines = text.split('\\n').map(l => l.trim()).filter(Boolean);\n  const output = [];\n\n  let currentManager = null;\n  let isTargetMatrix = false;\n\n  for (const line of lines) {\n    if (line.startsWith(\"1. **Target/ Matrix**\")) {\n      isTargetMatrix = true;\n      continue;\n    }\n\n    // Identify manager block start\n    const managerMatch = line.match(/^\\d+\\. \\*\\*(.*?)\\*\\*/);\n    if (managerMatch) {\n      currentManager = {\n        name: managerMatch[1],\n        data: {}\n      };\n      output.push(currentManager);\n      continue;\n    }\n\n    // Manager ID line\n    if (line.startsWith(\"- Manager ID:\")) {\n      const id = line.split(\":\")[1].trim();\n      currentManager.data.managerId = id;\n      continue;\n    }\n\n    // Metric line\n    const metricMatch = line.match(/^- (.*?): (.*)$/);\n    if (metricMatch) {\n      const key = metricMatch[1].trim();\n      const value = metricMatch[2].trim();\n\n      if (isTargetMatrix && currentManager === null) {\n        // Target row\n        currentManager = {\n          name: \"Target/Matrix\",\n          data: {\n            managerId: '0'\n          }\n        };\n        output.unshift(currentManager); // Ensure it's at the start\n      }\n\n      currentManager.data[key] = value;\n    }\n  }\n\n  // Convert to final output format\n  const formatted = [];\n  const target = output.find(o => o.name === 'Target/Matrix')?.data || {};\n\n  for (const entry of output) {\n    if (entry.name === 'Target/Matrix') continue;\n    const data = entry.data;\n    for (const metric of Object.keys(data)) {\n      if (metric === 'managerId') continue;\n      formatted.push({\n        section: entry.name,\n        metric,\n        target: target[metric] || '-',\n        achieved: data[metric],\n        managerId: data.managerId\n      });\n    }\n  }\n\n  return formatted;\n}\n\nreturn parseManagerKPI(rawText);\n"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        3440,
        -960
      ],
      "id": "d3f168a4-5689-462c-8d94-351a3448101d",
      "name": "Code8"
    },
    {
      "parameters": {
        "jsCode": "const items = $input.all().map(i => i.json);\n\n// Default value handling\nfor (const item of items) {\n  item.section = item.section || 'Overall KPI Report';\n  item.target = item.target || '-';\n  item.achieved = item.achievement || item.achieved || '-';\n}\n\n// Group by section\nconst grouped = {};\nfor (const item of items) {\n  const section = item.section;\n  if (!grouped[section]) grouped[section] = [];\n  grouped[section].push(item);\n}\n\n// Build HTML\nlet html = `<h2 style=\"text-align:center;\">Manager Wise KPI Report</h2>`;\n\nfor (const section of Object.keys(grouped)) {\n  html += `<h3 style=\"margin-top:20px;\">${section}</h3>`;\n  html += `\n    <table border=\"1\" cellspacing=\"0\" cellpadding=\"6\" style=\"border-collapse:collapse; width:100%; font-family:sans-serif;\">\n      <thead style=\"background:#f2f2f2;\">\n        <tr>\n          <th>Metric</th>\n          <th>Target</th>\n          <th>Achieved</th>\n        </tr>\n      </thead>\n      <tbody>\n  `;\n\n  for (const row of grouped[section]) {\n    html += `\n      <tr>\n        <td>${row.metric || '-'}</td>\n        <td>${row.target || '-'}</td>\n        <td>${row.achieved || '-'}</td>\n      </tr>\n    `;\n  }\n\n  html += `</tbody></table>`;\n}\n\nreturn [{ json: { html } }];\n"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        3600,
        -960
      ],
      "id": "5727b98a-4d8d-4f0f-a89a-4d3a5e09ebbd",
      "name": "Code9"
    },
    {
      "parameters": {
        "numberInputs": 3
      },
      "type": "n8n-nodes-base.merge",
      "typeVersion": 3.2,
      "position": [
        3840,
        -1180
      ],
      "id": "8072355b-96ac-4a8a-8bd8-82b851012927",
      "name": "Merge"
    },
    {
      "parameters": {
        "jsCode": "let combinedHtml = \"\";\n\nfor (const item of items) {\n  combinedHtml += item.json.html + \"<br><br>\";\n}\n\nreturn [{\n  json: {\n    emailBody: combinedHtml\n  }\n}];"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        4000,
        -1200
      ],
      "id": "9ec89927-fa9b-4e38-b383-bed35f011fcf",
      "name": "Code10"
    },
    {
      "parameters": {
        "promptType": "define",
        "text": "=GET all the Overall KPI report for OEM Report. Use the HTTPS tool to get all the information.donot use table format",
        "options": {
          "systemMessage": "\nUse all the HTTPS tools to get all the information. Keep information from http"
        }
      },
      "type": "@n8n/n8n-nodes-langchain.agent",
      "typeVersion": 2,
      "position": [
        2960,
        -500
      ],
      "id": "ed0674fd-d2f4-45c1-88a3-e8cb9a2040ed",
      "name": "AI Agent10"
    },
    {
      "parameters": {
        "model": {
          "__rl": true,
          "mode": "list",
          "value": "gpt-4o-mini"
        },
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.lmChatOpenAi",
      "typeVersion": 1.2,
      "position": [
        2980,
        -280
      ],
      "id": "7f6980d3-b82c-4a18-8bbb-b46f6d6605ce",
      "name": "OpenAI Chat Model10",
      "credentials": {
        "openAiApi": {
          "id": "SUyJI0IfI9M95Z5b",
          "name": "OpenAi account 89"
        }
      }
    },
    {
      "parameters": {
        "url": "https://mgm.ibos.io/sme/ExternalApi/GetKPIReportOverAll?seedId=e7c5d652-761a-44cf-807f-7f52ec517216&token=di1O%2F0uMyNvIjlOTWLTEt%2FNA3%2FP6JCRpHqZmkliNLzk2nnEO%2Fya25XN1m5deM40%2Bu%2BroXR%2FWWkAIjIPpwUXLiA%3D%3D&date=2025-08-31\n\n",
        "options": {}
      },
      "type": "n8n-nodes-base.httpRequestTool",
      "typeVersion": 4.2,
      "position": [
        3240,
        -260
      ],
      "id": "24d57cbe-5c2e-4c42-a4cc-eaa9bfb2e068",
      "name": "HTTP Request1"
    },
    {
      "parameters": {
        "jsCode": "const rawText = $input.first().json.output || \"\";\n\n// Helper to parse numbers\nfunction parseNumber(value) {\n  if (!value || value === '-' || value.toLowerCase() === 'n/a') return null;\n  let cleaned = value.replace(/[,\\s]|Days|%/g, '').trim();\n  let num = parseFloat(cleaned);\n  return isNaN(num) ? value.trim() : num;\n}\n\n// Split by blank lines or by pattern of numbered KPIs, keep blocks for each KPI\nconst blocks = rawText.split(/\\n\\s*\\n/).filter(b => b.trim());\n\n// Parse each block\nconst output = blocks.map(block => {\n  // Extract metric name inside **\n  const metricMatch = block.match(/\\*\\*(.+?)\\*\\*/);\n  const metric = metricMatch ? metricMatch[1].trim() : null;\n\n  // Extract Frequency from line \"- Frequency: ...\"\n  const freqMatch = block.match(/- Frequency:\\s*(.+)/i);\n  const frequency = freqMatch ? freqMatch[1].trim() : '-';\n\n  // Extract Target from line \"- Target: ...\"\n  const targetMatch = block.match(/- Target:\\s*(.+)/i);\n  const targetRaw = targetMatch ? targetMatch[1].trim() : '-';\n\n  // Extract Achievement from line \"- Achievement: ...\"\n  const achievementMatch = block.match(/- Achievement:\\s*(.+)/i);\n  const achievementRaw = achievementMatch ? achievementMatch[1].trim() : '-';\n\n  return {\n    metric,\n    frequency,\n    target: parseNumber(targetRaw),\n    achievement: parseNumber(achievementRaw),\n  };\n})\n// Filter out entries where metric is null or empty string (remove empty rows)\n.filter(item => item.metric !== null && item.metric !== '');\n\nreturn output;\n"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        3320,
        -500
      ],
      "id": "03886c8a-c607-4698-8282-183c2ff8711e",
      "name": "Code16"
    },
    {
      "parameters": {
        "jsCode": "const items = $input.all().map(i => i.json);\n\nconsole.log('INPUT ITEMS:', items); // Debug log\n\nfunction safeDisplay(value) {\n  if (value === undefined || value === null || value === '') return '-';\n  if (typeof value === 'number') return value.toLocaleString();\n  return value;\n}\n\nlet html = `<h2 style=\"text-align:center;\">Overall KPI Summary</h2>`;\nhtml += `\n  <table border=\"1\" cellspacing=\"0\" cellpadding=\"6\" style=\"border-collapse:collapse; width:100%; font-family:sans-serif;\">\n    <thead style=\"background:#f2f2f2;\">\n      <tr>\n        <th>Metric</th>\n        <th>Frequency</th>\n        <th style=\"text-align:right;\">Target</th>\n        <th style=\"text-align:right;\">Achievement</th>\n      </tr>\n    </thead>\n    <tbody>\n`;\n\nfor (const row of items) {\n  html += `\n    <tr>\n      <td>${safeDisplay(row.metric)}</td>\n      <td>${safeDisplay(row.frequency)}</td>\n      <td style=\"text-align:right;\">${safeDisplay(row.target)}</td>\n      <td style=\"text-align:right;\">${safeDisplay(row.achievement)}</td>\n    </tr>\n  `;\n}\n\nhtml += `</tbody></table>`;\n\nreturn [{ json: { html } }];\n"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        3540,
        -500
      ],
      "id": "d5406280-3641-497e-9440-06adea5b5c67",
      "name": "Code17"
    },
    {
      "parameters": {
        "content": "Overall KPI",
        "height": 440,
        "width": 760
      },
      "type": "n8n-nodes-base.stickyNote",
      "position": [
        2940,
        -540
      ],
      "typeVersion": 1,
      "id": "6b9ff27d-6c35-4c1f-91a5-f8b2a147dfe0",
      "name": "Sticky Note1"
    }
  ],
  "connections": {
    "Schedule Trigger": {
      "main": [
        [
          {
            "node": "AI Agent",
            "type": "main",
            "index": 0
          },
          {
            "node": "AI Agent10",
            "type": "main",
            "index": 0
          },
          {
            "node": "AI Agent4",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "AI Agent": {
      "main": [
        [
          {
            "node": "Code",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "OpenAI Chat Model": {
      "ai_languageModel": [
        [
          {
            "node": "AI Agent",
            "type": "ai_languageModel",
            "index": 0
          }
        ]
      ]
    },
    "Overall KPI report": {
      "ai_tool": [
        [
          {
            "node": "AI Agent",
            "type": "ai_tool",
            "index": 0
          }
        ]
      ]
    },
    "Code": {
      "main": [
        [
          {
            "node": "FinalKpi",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "FinalKpi": {
      "main": [
        [
          {
            "node": "Merge",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "AI Agent4": {
      "main": [
        [
          {
            "node": "Code8",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "OpenAI Chat Model4": {
      "ai_languageModel": [
        [
          {
            "node": "AI Agent4",
            "type": "ai_languageModel",
            "index": 0
          }
        ]
      ]
    },
    "Manager Wise KPI report": {
      "ai_tool": [
        [
          {
            "node": "AI Agent4",
            "type": "ai_tool",
            "index": 0
          }
        ]
      ]
    },
    "Code8": {
      "main": [
        [
          {
            "node": "Code9",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Code9": {
      "main": [
        [
          {
            "node": "Merge",
            "type": "main",
            "index": 2
          }
        ]
      ]
    },
    "Merge": {
      "main": [
        [
          {
            "node": "Code10",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Code10": {
      "main": [
        [
          {
            "node": "Gmail",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "AI Agent10": {
      "main": [
        [
          {
            "node": "Code16",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "OpenAI Chat Model10": {
      "ai_languageModel": [
        [
          {
            "node": "AI Agent10",
            "type": "ai_languageModel",
            "index": 0
          }
        ]
      ]
    },
    "HTTP Request1": {
      "ai_tool": [
        [
          {
            "node": "AI Agent10",
            "type": "ai_tool",
            "index": 0
          }
        ]
      ]
    },
    "Code16": {
      "main": [
        [
          {
            "node": "Code17",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Code17": {
      "main": [
        [
          {
            "node": "Merge",
            "type": "main",
            "index": 1
          }
        ]
      ]
    }
  },
  "pinData": {},
  "meta": {
    "templateCredsSetupCompleted": true,
    "instanceId": "5d927d9375747622767f095ddf723e3b731bdcb16f3cc831c46075d0d192f10c"
  }
}