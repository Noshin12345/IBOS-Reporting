{
  "nodes": [
    {
      "parameters": {
        "rule": {
          "interval": [
            {
              "triggerAtHour": 16,
              "triggerAtMinute": 50
            }
          ]
        }
      },
      "type": "n8n-nodes-base.scheduleTrigger",
      "typeVersion": 1.2,
      "position": [
        640,
        4780
      ],
      "id": "60260658-67d0-4dab-bec1-5a67421809fb",
      "name": "Schedule Trigger"
    },
    {
      "parameters": {
        "model": {
          "__rl": true,
          "mode": "list",
          "value": "gpt-4o-mini"
        },
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.lmChatOpenAi",
      "typeVersion": 1.2,
      "position": [
        1500,
        4200
      ],
      "id": "2476fd75-28fd-442a-9b42-508c668f30e4",
      "name": "OpenAI Chat Model2",
      "credentials": {
        "openAiApi": {
          "id": "SUyJI0IfI9M95Z5b",
          "name": "OpenAi account 89"
        }
      }
    },
    {
      "parameters": {
        "promptType": "define",
        "text": "GET all the YTD Report. Use the HTTPS tool to get all the information.",
        "options": {
          "systemMessage": "Use all the HTTPS tools to get all the information. Keep information from both HTTP Request1"
        }
      },
      "type": "@n8n/n8n-nodes-langchain.agent",
      "typeVersion": 2,
      "position": [
        1500,
        4000
      ],
      "id": "743bae78-b491-4a2d-bef9-94407f6e7946",
      "name": "AI Agent2"
    },
    {
      "parameters": {
        "url": "=https://crm.ibos.io/crm/Report/SalesOpsProductivityReportNew?AccountId=20255&BusinessUnitId=40394&Type=ManagerWise&fromDate={{ $today.format('yyyy-MM-dd') }}&toDate={{ $today.format('yyyy-MM-dd') }}",
        "options": {}
      },
      "type": "n8n-nodes-base.httpRequestTool",
      "typeVersion": 4.2,
      "position": [
        1660,
        4200
      ],
      "id": "2c0016ad-ae0d-46a3-9b48-b6a61dd95fdd",
      "name": "salesReport"
    },
    {
      "parameters": {
        "jsCode": "const rawText = $input.first().json.output;\n\n// Helper to clean and format numeric values\nfunction formatNumber(value) {\n  if (!value || value === '-') return '-';\n  const cleaned = value.replace(/[*$,\\s]/g, '').trim();\n  const num = parseFloat(cleaned);\n  return isNaN(num) ? '-' : num.toLocaleString();\n}\n\n// Extract only lines with a dash and colon\nconst lines = rawText\n  .split('\\n')\n  .map(line => line.trim())\n  .filter(line => /^[-–]\\s*.+?:/.test(line));\n\nconst output = [];\n\nfor (const line of lines) {\n  const match = line.match(/^[-–]\\s*(.+?):\\s*(.+)$/);\n  if (!match) continue;\n\n  let rawMetric = match[1].trim();\n  let rawValue = match[2].trim();\n\n  // Remove asterisks from metric and value\n  const metric = rawMetric.replace(/\\*/g, '').trim();\n  const value = rawValue.replace(/\\*/g, '').trim();\n\n  let target = '-';\n\n  switch (metric.toLowerCase()) {\n    case 'total call count':\n      target = '240';\n      break;\n    case 'field visit count':\n      target = '12';\n      break;\n  }\n\n  output.push({\n    section: 'Report Summary',\n    metric,\n    target,\n    achieved: formatNumber(value),\n    lastMonth: '-',\n    remaining: '-'\n  });\n}\n\nreturn output;\n"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        1860,
        4000
      ],
      "id": "d0ec0a96-8383-4c0d-b735-16d4bd8e5ee9",
      "name": "Code3",
      "retryOnFail": true
    },
    {
      "parameters": {
        "jsCode": "const items = $input.all().map(i => i.json);\n\n// Group items by section\nconst grouped = {};\nfor (const item of items) {\n  const section = item.section || 'Unknown';\n  if (!grouped[section]) grouped[section] = [];\n  grouped[section].push(item);\n}\n\n// Build HTML output\nlet html = `<h2 style=\"text-align:center;\">Overall Summary iBOS</h2>`;\n\nfor (const section of Object.keys(grouped)) {\n  html += `<h3 style=\"margin-top:20px;\">${section}</h3>`;\n  html += `\n    <table border=\"1\" cellspacing=\"0\" cellpadding=\"6\" style=\"border-collapse:collapse; width:100%; font-family:sans-serif;\">\n      <thead style=\"background:#f2f2f2;\">\n        <tr>\n          <th>Metric</th>\n          <th>Target</th>\n          <th>Achieved</th>\n        </tr>\n      </thead>\n      <tbody>\n  `;\n\n  for (const row of grouped[section]) {\n    html += `\n      <tr>\n        <td>${row.metric || '-'}</td>\n        <td>${row.target || '-'}</td>\n        <td>${row.achieved || '-'}</td>\n      </tr>\n    `;\n  }\n\n  html += `</tbody></table>`;\n}\n\nreturn [{ json: { html } }];\n"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        2140,
        4000
      ],
      "id": "a088a014-4956-4317-8526-ed6d4291607e",
      "name": "finalsales1",
      "retryOnFail": true
    },
    {
      "parameters": {
        "numberInputs": 4
      },
      "type": "n8n-nodes-base.merge",
      "typeVersion": 3.2,
      "position": [
        2700,
        4580
      ],
      "id": "3a69c728-ce18-48a5-9f34-b8dc6eba184a",
      "name": "Merge1"
    },
    {
      "parameters": {
        "jsCode": "let combinedHtml = \"\";\n\nfor (const item of items) {\n  combinedHtml += item.json.html + \"<br><br>\";\n}\n\nreturn [{\n  json: {\n    emailBody: combinedHtml\n  }\n}];"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        3080,
        4600
      ],
      "id": "cf4750e3-e3a3-43fc-ba89-ddaede74250b",
      "name": "Code12"
    },
    {
      "parameters": {
        "content": "Overall Summary",
        "height": 800,
        "width": 1040
      },
      "type": "n8n-nodes-base.stickyNote",
      "position": [
        1220,
        3900
      ],
      "typeVersion": 1,
      "id": "da9a3214-96bb-429b-9228-6c8fddd9d2d0",
      "name": "Sticky Note1"
    },
    {
      "parameters": {
        "promptType": "define",
        "text": "GET all the Report. Use the HTTPS tool to get all the information.",
        "options": {
          "systemMessage": "Use all the HTTPS tools to get all the information. Keep information from both HTTP Request1"
        }
      },
      "type": "@n8n/n8n-nodes-langchain.agent",
      "typeVersion": 2,
      "position": [
        1500,
        4420
      ],
      "id": "aeacee95-a135-4b4b-894b-80bb5ac25da9",
      "name": "AI Agent3"
    },
    {
      "parameters": {
        "model": {
          "__rl": true,
          "mode": "list",
          "value": "gpt-4o-mini"
        },
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.lmChatOpenAi",
      "typeVersion": 1.2,
      "position": [
        1520,
        4640
      ],
      "id": "745b6d8f-f65b-4615-b165-4e1d35640150",
      "name": "OpenAI Chat Model3",
      "credentials": {
        "openAiApi": {
          "id": "SUyJI0IfI9M95Z5b",
          "name": "OpenAi account 89"
        }
      }
    },
    {
      "parameters": {
        "url": "=https://crm.ibos.io/crm/Report/SalesOpsProductivityReportNew?AccountId=20255&BusinessUnitId=40588&Type=ManagerWise&fromDate={{ $today.format('yyyy-MM-dd') }}&toDate={{ $today.format('yyyy-MM-dd') }}",
        "options": {}
      },
      "type": "n8n-nodes-base.httpRequestTool",
      "typeVersion": 4.2,
      "position": [
        1660,
        4640
      ],
      "id": "8e653337-8f96-4190-8502-d27188a38a11",
      "name": "HTTP Request1"
    },
    {
      "parameters": {
        "jsCode": "const rawText = $input.first().json.output || '';\n\n// Helper to clean and format numeric values\nfunction formatNumber(value) {\n  if (!value || value === '-' || value.toLowerCase() === 'n/a') return '-';\n  const cleaned = value.replace(/[*$,\\s]/g, '').trim();\n  const num = parseFloat(cleaned);\n  return isNaN(num) ? '-' : num.toLocaleString();\n}\n\n// Extract lines starting with dash and containing a colon (metric: value)\nconst lines = rawText\n  .split('\\n')\n  .map(line => line.trim())\n  .filter(line => /^[-–]\\s*.+?:/.test(line));\n\nconst output = [];\n\nfor (const line of lines) {\n  const match = line.match(/^[-–]\\s*(.+?):\\s*(.+)$/);\n  if (!match) continue;\n\n  let rawMetric = match[1].trim();\n  let rawValue = match[2].trim();\n\n  // Remove asterisks or unwanted characters from metric and value\n  const metric = rawMetric.replace(/\\*/g, '').trim();\n  const value = rawValue.replace(/\\*/g, '').trim();\n\n  // Define targets for specific metrics, or fallback '-'\n  let target = '-';\n  switch (metric.toLowerCase()) {\n    case 'total call count':\n      target = '20';\n      break;\n  \n    // Add more metrics with targets if needed here\n  }\n\n  output.push({\n    section: 'OEM Report Summary',\n    metric,\n    target,\n    achieved: formatNumber(value),\n    lastMonth: '-',\n    remaining: '-'\n  });\n}\n\nreturn output;\n"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        1860,
        4420
      ],
      "id": "30e36ba7-815c-4d8b-a4a8-348b1965384d",
      "name": "Code4"
    },
    {
      "parameters": {
        "jsCode": "// Collect all input JSON items\nconst items = $input.all().map(i => i.json);\n\n// Group items by their 'section' property\nconst grouped = {};\nfor (const item of items) {\n  const section = item.section || 'Unknown';\n  if (!grouped[section]) grouped[section] = [];\n  grouped[section].push(item);\n}\n\n// Start building the HTML output\nlet html = `<h2 style=\"text-align:center;\">Overall OEM Summary</h2>`;\n\nfor (const section of Object.keys(grouped)) {\n  html += `<h3 style=\"margin-top:20px;\">${section}</h3>`;\n  html += `\n    <table border=\"1\" cellspacing=\"0\" cellpadding=\"6\" style=\"border-collapse:collapse; width:100%; font-family:sans-serif;\">\n      <thead style=\"background:#f2f2f2;\">\n        <tr>\n          <th>Metric</th>\n          <th>Target</th>\n          <th>Achieved</th>\n      \n        </tr>\n      </thead>\n      <tbody>\n  `;\n\n  // Add one row per metric in this section\n  for (const row of grouped[section]) {\n    html += `\n      <tr>\n        <td>${row.metric || '-'}</td>\n        <td>${row.target || '-'}</td>\n        <td>${row.achieved || '-'}</td>\n       \n      </tr>\n    `;\n  }\n\n  html += `</tbody></table>`;\n}\n\n// Return the HTML string in the output\nreturn [{ json: { html } }];\n"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        2080,
        4420
      ],
      "id": "5271427f-2a0a-4af3-a37d-9deab808eaf2",
      "name": "Code5"
    },
    {
      "parameters": {
        "content": "Main Workflow ",
        "height": 1920,
        "width": 3800,
        "color": 4
      },
      "type": "n8n-nodes-base.stickyNote",
      "position": [
        780,
        3640
      ],
      "typeVersion": 1,
      "id": "ad87b5a6-cfd4-464d-94c8-767f13bf8354",
      "name": "Sticky Note6"
    },
    {
      "parameters": {
        "model": {
          "__rl": true,
          "value": "gpt-4.1-mini",
          "mode": "list",
          "cachedResultName": "gpt-4.1-mini"
        },
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.lmChatOpenAi",
      "typeVersion": 1.2,
      "position": [
        1340,
        5160
      ],
      "id": "fba5317f-96c5-4dd4-9960-a762861353b9",
      "name": "OpenAI Chat Model5",
      "credentials": {
        "openAiApi": {
          "id": "SUyJI0IfI9M95Z5b",
          "name": "OpenAi account 89"
        }
      }
    },
    {
      "parameters": {
        "promptType": "define",
        "text": "GET all the MTD Report. Use the HTTPS tool to get all the information.",
        "options": {
          "systemMessage": "Use all the HTTPS tools to get all the information. Keep information from both HTTP Request1.give me all the information of MTD Report: (All Products), PeopleDesk ,Managerium, Prime VAT separately. "
        }
      },
      "type": "@n8n/n8n-nodes-langchain.agent",
      "typeVersion": 2,
      "position": [
        1360,
        4900
      ],
      "id": "33e5dfd6-8c74-43ad-b10b-9481eeb623d1",
      "name": "AI Agent7"
    },
    {
      "parameters": {
        "url": "https://mgm.ibos.io/sme/ExternalApi/GetDailyMTDProductWiseAlsoSummaryWise?seedId=f8945fd6-72ec-4a9e-a15f-a14815f1e006&token=di1O%2F0uMyNvIjlOTWLTEt%2FNA3%2FP6JCRpHqZmkliNLznxdQ4o0aCxsSvwP99YzS0xOSKvVlNsQLKT8KUC145GDg%3D%3D\n",
        "options": {}
      },
      "type": "n8n-nodes-base.httpRequestTool",
      "typeVersion": 4.2,
      "position": [
        1600,
        5100
      ],
      "id": "b7d2b058-5a05-4ef8-bf3c-967d94548a84",
      "name": "mtd"
    },
    {
      "parameters": {
        "jsCode": "const rawText = $input.first().json.output || '';\n\nfunction formatNumber(value) {\n  if (!value) return '0';\n  const cleaned = value.replace(/,/g, '').trim();\n  if (cleaned === '' || cleaned.toLowerCase() === 'n/a' || cleaned === '(not specified)') return '0';\n  const num = parseFloat(cleaned);\n  return isNaN(num) ? '0' : num.toLocaleString();\n}\n\nconst lines = rawText.split('\\n').map(line => line.trim()).filter(Boolean);\n\nconst allowedSections = [\n  'MTD Report: (All Products)',\n  'PeopleDesk',\n  'Managerium',\n  'Prime VAT'\n];\n\nlet currentSection = '';\nconst output = [];\n\nfor (const line of lines) {\n  // Detect section headers directly\n  if (allowedSections.includes(line)) {\n    currentSection = line;\n    continue;\n  }\n\n  if (!currentSection) continue;\n\n  // Match metric lines\n  const match = line.match(/^[-–]\\s*(.+?):\\s*(.+)$/);\n  if (!match) continue;\n\n  const metric = match[1].trim();\n  const details = match[2].trim();\n\n  const record = {\n    section: currentSection,\n    metric,\n    target: '0',\n    todayAchievement: '0',\n    achieved: '0',\n    remaining: '0',\n    lastMonthSameDate: '0'\n  };\n\n  // Match all key/value pairs in the line\n  const kvRegex = /([A-Za-z\\s\\(\\)']+):?\\s*(-?[\\d,]+)/g;\n  let kvMatch;\n  while ((kvMatch = kvRegex.exec(details)) !== null) {\n    const key = kvMatch[1].trim().toLowerCase();\n    const val = kvMatch[2].trim();\n    if (key.includes('target')) record.target = formatNumber(val);\n    else if (key.includes('today')) record.todayAchievement = formatNumber(val);\n    else if (key.includes('achieved')) record.achieved = formatNumber(val);\n    else if (key.includes('remaining')) record.remaining = formatNumber(val);\n    else if (key.includes('last month')) record.lastMonthSameDate = formatNumber(val);\n  }\n\n  output.push(record);\n}\n\nreturn output;\n"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        1740,
        4900
      ],
      "id": "25ede7bc-428e-4072-b565-9f123c3d4ecf",
      "name": "Code13",
      "retryOnFail": true
    },
    {
      "parameters": {
        "jsCode": "const items = $input.all().map(i => i.json);\n\n// Group items by section\nconst grouped = {};\nfor (const item of items) {\n  const section = item.section || 'Unknown';\n  if (!grouped[section]) grouped[section] = [];\n  grouped[section].push(item);\n}\n\n// Build HTML output\nlet html = `<h2 style=\"text-align:center;\">MTD Report Summary ( iBOS All Products) </h2>`;\n\nfor (const section of Object.keys(grouped)) {\n  html += `<h3 style=\"margin-top:20px;\">${section}</h3>`;\n  html += `\n    <table border=\"1\" cellspacing=\"0\" cellpadding=\"6\" style=\"border-collapse:collapse; width:100%; font-family:sans-serif;\">\n      <thead style=\"background:#f2f2f2;\">\n        <tr>\n          <th>Metric</th>\n          <th>Target</th>\n          <th>Achieved</th>\n          <th>Last Month Same Date</th>\n          <th>Remaining</th>\n        </tr>\n      </thead>\n      <tbody>\n  `;\n\n  for (const row of grouped[section]) {\n    html += `\n      <tr>\n        <td>${row.metric || '-'}</td>\n        <td style=\"text-align:right;\">${row.target || '-'}</td>\n        <td style=\"text-align:right;\">${row.achieved || '-'}</td>\n        <td style=\"text-align:right;\">${row.lastMonthSameDate || '-'}</td>\n        <td style=\"text-align:right;\">${row.remaining || '-'}</td>\n      </tr>\n    `;\n  }\n\n  html += `</tbody></table>`;\n}\n\nreturn [{ json: { html } }];\n"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        1940,
        4900
      ],
      "id": "0d98a9aa-3840-4fac-ac7c-9bd59982d45b",
      "name": "final mtd1",
      "alwaysOutputData": true,
      "retryOnFail": true
    },
    {
      "parameters": {
        "content": "mtd report Summary",
        "height": 420,
        "width": 880
      },
      "type": "n8n-nodes-base.stickyNote",
      "position": [
        1240,
        4780
      ],
      "typeVersion": 1,
      "id": "d96bbaac-7cfa-4ce7-a11e-e8bf6a520c00",
      "name": "Sticky Note4"
    },
    {
      "parameters": {
        "sendTo": "noshin@ibos.io ",
        "subject": "pp",
        "message": "={{ $json.emailBody }}",
        "options": {}
      },
      "type": "n8n-nodes-base.gmail",
      "typeVersion": 2.1,
      "position": [
        3400,
        4600
      ],
      "id": "282bc768-0a04-4da7-bf59-18f51e02fae3",
      "name": "Gmail4",
      "webhookId": "a296bcf0-b13b-4d57-907d-3da35122a15d",
      "credentials": {
        "gmailOAuth2": {
          "id": "lAPzRZXFHU9cYly5",
          "name": "Gmail account 108-Eaccount"
        }
      }
    },
    {
      "parameters": {
        "promptType": "define",
        "text": "GET all the MTD Report. Use the HTTPS tool to get all the information.",
        "options": {
          "systemMessage": "Use all the HTTPS tools to get all the information. Keep information from both HTTP Request1.donot make tables at the time of generating output.donot use ## and star symbol in output.make sure you take all the information of Today Report and MTD Report: (All Products) and Product-specific MTD.donot give extra info.donot use -  | "
        }
      },
      "type": "@n8n/n8n-nodes-langchain.agent",
      "typeVersion": 2,
      "position": [
        1340,
        5380
      ],
      "id": "1815275f-661a-4a5a-8aca-213f1dd3c8eb",
      "name": "AI Agent"
    },
    {
      "parameters": {
        "model": {
          "__rl": true,
          "mode": "list",
          "value": "gpt-4o-mini"
        },
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.lmChatOpenAi",
      "typeVersion": 1.2,
      "position": [
        1180,
        5740
      ],
      "id": "8a56da95-50ef-4a70-a14b-a0f009f1d761",
      "name": "OpenAI Chat Model",
      "credentials": {
        "openAiApi": {
          "id": "SUyJI0IfI9M95Z5b",
          "name": "OpenAi account 89"
        }
      }
    },
    {
      "parameters": {
        "url": "https://mgm.ibos.io/sme/ExternalApi/GetDailyMTDProductWiseAlsoSummaryWise?seedId=e7c5d652-761a-44cf-807f-7f52ec517216&token=di1O%2F0uMyNvIjlOTWLTEt%2FNA3%2FP6JCRpHqZmkliNLzk2nnEO%2Fya25XN1m5deM40%2Bu%2BroXR%2FWWkAIjIPpwUXLiA%3D%3D",
        "options": {}
      },
      "type": "n8n-nodes-base.httpRequestTool",
      "typeVersion": 4.2,
      "position": [
        1880,
        5700
      ],
      "id": "524fa8ca-d5db-4cd5-85a4-8cc830ea3f8a",
      "name": "mtd for oem2"
    },
    {
      "parameters": {
        "jsCode": "let rawText = $input.first().json.output || '';\nrawText = rawText.replace(/\\r/g, '').trim();\nconst lines = rawText.split('\\n');\n\nfunction cleanValue(val) {\n  if (!val) return '0'; // default empty → 0\n  const v = val.trim().replace(/^:+/, '').trim(); // remove leading colons/spaces\n  if (v === '' || /^(n\\/a|null|\\(not specified\\)|—|-|empty)$/i.test(v)) return '0';\n  return v; // keep commas in numbers\n}\n\nconst mtdReportAllProducts = [];\nlet inAllProducts = false;\n\nfor (const line of lines) {\n  const trimmed = line.trim();\n  if (!trimmed) continue;\n\n  // Detect section start\n  if (/^MTD Report.*All Products/i.test(trimmed)) {\n    inAllProducts = true;\n    continue;\n  }\n  if (/^Product-Specific MTD/i.test(trimmed)) {\n    inAllProducts = false;\n    break;\n  }\n\n  // FIX → match metrics even without dash\n  if (inAllProducts && /^[A-Za-z]/.test(trimmed)) {\n    const match = trimmed.match(/^([^:]+):\\s*(.*)$/);\n    if (!match) continue;\n\n    const metricName = match[1].trim();\n    const valuesPart = match[2].trim();\n\n    const metric = {\n      metric: metricName,\n      target: '0',\n      todayAchievement: '0',\n      mtdAchieved: '0',\n      lastMonthSameDate: '0',\n      remaining: '0',\n    };\n\n    // Split by comma → [\"MTD Target: 12,432,000\", \"Today Achievement: 0\", ...]\n    const parts = valuesPart.split(/,\\s+/).map(s => s.trim());\n\n    for (const part of parts) {\n      if (/target/i.test(part)) {\n        metric.target = cleanValue(part.replace(/.*target\\s*:?/i, ''));\n      } else if (/today.*achievement/i.test(part)) {\n        metric.todayAchievement = cleanValue(part.replace(/today.*achievement\\s*:?/i, ''));\n      } else if (/mtd\\s*achieved/i.test(part)) {\n        metric.mtdAchieved = cleanValue(part.replace(/mtd\\s*achieved\\s*:?/i, ''));\n      } else if (/last\\s*month/i.test(part)) {\n        metric.lastMonthSameDate = cleanValue(part.replace(/last\\s*month.*?date?\\s*:?/i, ''));\n      } else if (/remaining/i.test(part)) {\n        metric.remaining = cleanValue(part.replace(/remaining\\s*:?/i, ''));\n      }\n    }\n\n    mtdReportAllProducts.push(metric);\n  }\n}\n\nreturn { mtdReportAllProducts };\n"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        1920,
        5380
      ],
      "id": "bf4a0893-1939-4592-87d1-b4e93a103ef3",
      "name": "Code"
    },
    {
      "parameters": {
        "jsCode": "const data = $input.all()[0].json;\n\nconst todayReport = Array.isArray(data.todayReport) ? data.todayReport : [];\nconst mtdReportAllProducts = Array.isArray(data.mtdReportAllProducts) ? data.mtdReportAllProducts : [];\n\n// Helper: clean numbers (remove commas, stars, dashes)\nfunction cleanNumber(val) {\n  if (val === null || val === undefined) return 0;\n  const n = parseFloat(String(val).replace(/[,#*\\-—()]/g, '').trim());\n  return isNaN(n) ? 0 : n;\n}\n\nfunction escapeHtml(text) {\n  if (typeof text !== 'string') return text || '-';\n  return text\n    .replace(/&/g, \"&amp;\")\n    .replace(/</g, \"&lt;\")\n    .replace(/>/g, \"&gt;\")\n    .replace(/\"/g, \"&quot;\")\n    .replace(/'/g, \"&#039;\");\n}\n\nfunction generateTable(title, reportArray) {\n  if (!reportArray.length) {\n    return `<h2 style=\"text-align:center;\">${escapeHtml(title)}</h2><p>No data available.</p>`;\n  }\n\n  let html = `<h2 style=\"text-align:center;\">${escapeHtml(title)}</h2>`;\n  html += `\n    <table border=\"1\" cellspacing=\"0\" cellpadding=\"6\" style=\"border-collapse:collapse; width:100%; font-family:sans-serif;\">\n      <thead style=\"background:#f2f2f2;\">\n        <tr>\n          <th>Metric</th>\n          <th>Target</th>\n          <th>Today's Achievement</th>\n          <th>MTD Achieved</th>\n          <th>Last Month Same Date</th>\n          <th>Remaining</th>\n        </tr>\n      </thead>\n      <tbody>\n  `;\n\n  for (const row of reportArray) {\n    html += `\n      <tr>\n        <td>${escapeHtml(row.metric)}</td>\n        <td style=\"text-align:right;\">${cleanNumber(row.target)}</td>\n        <td style=\"text-align:right;\">${cleanNumber(row.todayAchievement)}</td>\n        <td style=\"text-align:right;\">${cleanNumber(row.mtdAchieved)}</td>\n        <td style=\"text-align:right;\">${cleanNumber(row.lastMonthSameDate)}</td>\n        <td style=\"text-align:right;\">${cleanNumber(row.remaining)}</td>\n      </tr>\n    `;\n  }\n\n  html += `</tbody></table>`;\n\n  return html;\n}\n\nlet html = '';\n\nhtml += '<br><br>'; // spacing between tables\nhtml += generateTable(\"MTD Report (OEM All Products)\", mtdReportAllProducts);\n\nreturn [{ json: { html } }];\n"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        2180,
        5360
      ],
      "id": "f9fddcf9-9d82-45ec-9ea2-b7b2a10424bd",
      "name": "Code10"
    }
  ],
  "connections": {
    "Schedule Trigger": {
      "main": [
        [
          {
            "node": "AI Agent2",
            "type": "main",
            "index": 0
          },
          {
            "node": "AI Agent3",
            "type": "main",
            "index": 0
          },
          {
            "node": "AI Agent7",
            "type": "main",
            "index": 0
          },
          {
            "node": "AI Agent",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "OpenAI Chat Model2": {
      "ai_languageModel": [
        [
          {
            "node": "AI Agent2",
            "type": "ai_languageModel",
            "index": 0
          }
        ]
      ]
    },
    "AI Agent2": {
      "main": [
        [
          {
            "node": "Code3",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "salesReport": {
      "ai_tool": [
        [
          {
            "node": "AI Agent2",
            "type": "ai_tool",
            "index": 0
          }
        ]
      ]
    },
    "Code3": {
      "main": [
        [
          {
            "node": "finalsales1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "finalsales1": {
      "main": [
        [
          {
            "node": "Merge1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Merge1": {
      "main": [
        [
          {
            "node": "Code12",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Code12": {
      "main": [
        [
          {
            "node": "Gmail4",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "AI Agent3": {
      "main": [
        [
          {
            "node": "Code4",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "OpenAI Chat Model3": {
      "ai_languageModel": [
        [
          {
            "node": "AI Agent3",
            "type": "ai_languageModel",
            "index": 0
          }
        ]
      ]
    },
    "HTTP Request1": {
      "ai_tool": [
        [
          {
            "node": "AI Agent3",
            "type": "ai_tool",
            "index": 0
          }
        ]
      ]
    },
    "Code4": {
      "main": [
        [
          {
            "node": "Code5",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Code5": {
      "main": [
        [
          {
            "node": "Merge1",
            "type": "main",
            "index": 2
          }
        ]
      ]
    },
    "OpenAI Chat Model5": {
      "ai_languageModel": [
        [
          {
            "node": "AI Agent7",
            "type": "ai_languageModel",
            "index": 0
          }
        ]
      ]
    },
    "AI Agent7": {
      "main": [
        [
          {
            "node": "Code13",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "mtd": {
      "ai_tool": [
        [
          {
            "node": "AI Agent7",
            "type": "ai_tool",
            "index": 0
          }
        ]
      ]
    },
    "Code13": {
      "main": [
        [
          {
            "node": "final mtd1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "final mtd1": {
      "main": [
        [
          {
            "node": "Merge1",
            "type": "main",
            "index": 1
          }
        ]
      ]
    },
    "AI Agent": {
      "main": [
        [
          {
            "node": "Code",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "OpenAI Chat Model": {
      "ai_languageModel": [
        [
          {
            "node": "AI Agent",
            "type": "ai_languageModel",
            "index": 0
          }
        ]
      ]
    },
    "mtd for oem2": {
      "ai_tool": [
        [
          {
            "node": "AI Agent",
            "type": "ai_tool",
            "index": 0
          }
        ]
      ]
    },
    "Code": {
      "main": [
        [
          {
            "node": "Code10",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Code10": {
      "main": [
        [
          {
            "node": "Merge1",
            "type": "main",
            "index": 3
          }
        ]
      ]
    }
  },
  "pinData": {
    "AI Agent7": [
      {
        "output": "Here is the detailed information of the MTD Report for the requested categories:\n\nMTD Report: (All Products)\n- Sales Value (b): MTD Target: 12,100,000, MTD Achieved: 3,236,125, Last Month Same Date: 6,500,000, Remaining: 8,863,875\n- Number of Sales (Deals): MTD Target: 0, MTD Achieved: 6, Last Month Same Date: 7, Remaining: 0\n- Proposal Value (b): MTD Target: 0, MTD Achieved: 72,957,296, Last Month Same Date: 71,601,640, Remaining: 0\n- Number of Proposals Sent: MTD Target: 0, MTD Achieved: 47, Last Month Same Date: 46, Remaining: 0\n- Number of Meetings: MTD Target: 0, MTD Achieved: 160, Last Month Same Date: 170, Remaining: 0\n- Number of Client Visits: MTD Target: , MTD Achieved: 22, Last Month Same Date: 36, Remaining: 0\n- Number of Leads Generated: MTD Target: 0, MTD Achieved: 154, Last Month Same Date: 154, Remaining: 0\n- Number of Calls Made: MTD Target: 0, MTD Achieved: 3,366, Last Month Same Date: 3,366, Remaining: 0\n\nPeopleDesk\n- Sales Value (b): MTD Target: 3,600,000, MTD Achieved: 2,677,125, Last Month Same Date: 0, Remaining: 922,875\n- Number of Sales (Deals): MTD Target: 0, MTD Achieved: 3, Last Month Same Date: 0, Remaining: 0\n- Proposal Value (b): MTD Target: 0, MTD Achieved: 7,693,500, Last Month Same Date: 35,390,000, Remaining: 0\n- Number of Proposals Sent: MTD Target: 0, MTD Achieved: 5, Last Month Same Date: 9, Remaining: 0\n- Number of Meetings: MTD Target: 0, MTD Achieved: 30, Last Month Same Date: 41, Remaining: 0\n- Number of Client Visits: MTD Target: 0, MTD Achieved: 11, Last Month Same Date: 16, Remaining: 0\n- Number of Leads Generated: MTD Target: 0, MTD Achieved: 31, Last Month Same Date: 31, Remaining: 0\n- Number of Calls Made: MTD Target: 0, MTD Achieved: 2,283, Last Month Same Date: 2,283, Remaining: 0\n\nManagerium\n- Sales Value (b): MTD Target: 8,400,000, MTD Achieved: 370,000, Last Month Same Date: 4,400,000, Remaining: 8,030,000\n- Number of Sales (Deals): MTD Target: 0, MTD Achieved: 2, Last Month Same Date: 6, Remaining: 0\n- Proposal Value (b): MTD Target: 0, MTD Achieved: 54,953,496, Last Month Same Date: 34,221,640, Remaining: 0\n- Number of Proposals Sent: MTD Target: 0, MTD Achieved: 36, Last Month Same Date: 33, Remaining: 0\n- Number of Meetings: MTD Target: 0, MTD Achieved: 110, Last Month Same Date: 118, Remaining: 0\n- Number of Client Visits: MTD Target: 0, MTD Achieved: 8, Last Month Same Date: 18, Remaining: 0\n- Number of Leads Generated: MTD Target: 0, MTD Achieved: 99, Last Month Same Date: 99, Remaining: 0\n- Number of Calls Made: MTD Target: 0, MTD Achieved: 2,986, Last Month Same Date: 2,986, Remaining: 0\n\nPrime VAT\n- Sales Value (b): MTD Target: 100,000, MTD Achieved: 189,000, Last Month Same Date: 0, Remaining: -89,000\n- Number of Sales (Deals): MTD Target: 0, MTD Achieved: 1, Last Month Same Date: 0, Remaining: 0\n- Proposal Value (b): MTD Target: 0, MTD Achieved: 240,000, Last Month Same Date: 590,000, Remaining: 0\n- Number of Proposals Sent: MTD Target: 0, MTD Achieved: 2, Last Month Same Date: 2, Remaining: 0\n- Number of Meetings: MTD Target: 0, MTD Achieved: 5, Last Month Same Date: 3, Remaining: 0\n- Number of Client Visits: MTD Target: 0, MTD Achieved: 1, Last Month Same Date: 0, Remaining: 0\n- Number of Leads Generated: MTD Target: 0, MTD Achieved: 9, Last Month Same Date: 9, Remaining: 0\n- Number of Calls Made: MTD Target: 0, MTD Achieved: 2,040, Last Month Same Date: 2,040, Remaining: 0\n\nIf you want information from other specific reports or more details, please let me know!"
      }
    ],
    "AI Agent": [
      {
        "output": "The MTD report data includes the following:\n\n**Today Report:**\n- Sales Value (b): MTD Target is 12,432,000; Today Achievement is 0; MTD Achieved is 0; Last Month Same Date is 0; Remaining is 0.\n- Number of Sales (Deals): MTD Target is 0; Today Achievement is 0; MTD Achieved is 0; Last Month Same Date is 0; Remaining is 0.\n- Proposal Value (b): MTD Target is 0; Today Achievement is 0; MTD Achieved is 0; Last Month Same Date is 0; Remaining is 0.\n- Number of Proposals Sent: MTD Target is 0; Today Achievement is 1; MTD Achieved is 0; Last Month Same Date is 0; Remaining is 0.\n- Number of Meetings: MTD Target is 0; Today Achievement is 3; MTD Achieved is 0; Last Month Same Date is 0; Remaining is 0.\n- Number of Client Visits: MTD Target is 0; Today Achievement is 0; MTD Achieved is 0; Last Month Same Date is 0; Remaining is 0.\n- Number of Leads Generated: MTD Target is 0; Today Achievement is 0; MTD Achieved is 0; Last Month Same Date is 0; Remaining is 0.\n- Number of Calls Made: MTD Target is 0; Today Achievement is 8; MTD Achieved is 0; Last Month Same Date is 0; Remaining is 0.\n\n**MTD Report: (All Products):**\n- Sales Value (b): MTD Target is 12,432,000; Today Achievement is 0; MTD Achieved is 9,573,470; Last Month Same Date is 0; Remaining is 2,858,530.\n- Number of Sales (Deals): MTD Target is 0; Today Achievement is 0; MTD Achieved is 2; Last Month Same Date is 0; Remaining is 0.\n- Proposal Value (b): MTD Target is 0; Today Achievement is 0; MTD Achieved is 64,000,000; Last Month Same Date is 0; Remaining is 0.\n- Number of Proposals Sent: MTD Target is 0; Today Achievement is 0; MTD Achieved is 8; Last Month Same Date is 8; Remaining is 0.\n- Number of Meetings: MTD Target is 0; Today Achievement is 0; MTD Achieved is 57; Last Month Same Date is 37; Remaining is 0.\n- Number of Client Visits: MTD Target is empty; Today Achievement is 0; MTD Achieved is 0; Last Month Same Date is 0; Remaining is 0.\n- Number of Leads Generated: MTD Target is 0; Today Achievement is 0; MTD Achieved is 12; Last Month Same Date is 12; Remaining is 0.\n- Number of Calls Made: MTD Target is 0; Today Achievement is 0; MTD Achieved is 174; Last Month Same Date is 174; Remaining is 0. \n\n**Product-specific MTD reports** are included within the above MTD Report aggregates for multiple products like Oracle, Microsoft, and others with similar structure and metrics."
      }
    ],
    "Code": [
      {
        "mtdReportAllProducts": [
          {
            "metric": "Sales Value (b)",
            "target": "12,432,000",
            "todayAchievement": "0",
            "mtdAchieved": "9,573,470",
            "lastMonthSameDate": "0",
            "remaining": "2,858,530"
          },
          {
            "metric": "Number of Sales (Deals)",
            "target": "0",
            "todayAchievement": "0",
            "mtdAchieved": "2",
            "lastMonthSameDate": "0",
            "remaining": "0"
          },
          {
            "metric": "Proposal Value (b)",
            "target": "0",
            "todayAchievement": "0",
            "mtdAchieved": "64,000,000",
            "lastMonthSameDate": "0",
            "remaining": "0"
          },
          {
            "metric": "Number of Proposals Sent",
            "target": "0",
            "todayAchievement": "0",
            "mtdAchieved": "8",
            "lastMonthSameDate": "6",
            "remaining": "0"
          },
          {
            "metric": "Number of Meetings",
            "target": "0",
            "todayAchievement": "0",
            "mtdAchieved": "56",
            "lastMonthSameDate": "36",
            "remaining": "0"
          },
          {
            "metric": "Number of Client Visits",
            "target": "0",
            "todayAchievement": "0",
            "mtdAchieved": "0",
            "lastMonthSameDate": "0",
            "remaining": "0"
          },
          {
            "metric": "Number of Leads Generated",
            "target": "0",
            "todayAchievement": "0",
            "mtdAchieved": "12",
            "lastMonthSameDate": "12",
            "remaining": "0"
          },
          {
            "metric": "Number of Calls Made",
            "target": "0",
            "todayAchievement": "0",
            "mtdAchieved": "167",
            "lastMonthSameDate": "167",
            "remaining": "0"
          }
        ]
      }
    ]
  },
  "meta": {
    "templateCredsSetupCompleted": true,
    "instanceId": "5d927d9375747622767f095ddf723e3b731bdcb16f3cc831c46075d0d192f10c"
  }
}